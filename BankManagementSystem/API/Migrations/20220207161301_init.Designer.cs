// <auto-generated />
using System;
using API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(BankManagmentSystemContext))]
    [Migration("20220207161301_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Database.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountActivityId")
                        .HasColumnType("int");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IndividualNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountActivityId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountActivityId = 1,
                            AccountTypeId = 1010,
                            Balance = 0m,
                            Credit = 0m,
                            CurrencyId = 4,
                            Debit = 0m,
                            IndividualNumber = 1,
                            Name = "Касса банка"
                        },
                        new
                        {
                            Id = 2,
                            AccountActivityId = 2,
                            AccountTypeId = 7327,
                            Balance = 100000000000m,
                            Credit = 0m,
                            CurrencyId = 4,
                            Debit = 0m,
                            IndividualNumber = 1,
                            Name = "Счет фонда развития банка"
                        });
                });

            modelBuilder.Entity("API.Database.AccountActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "актив."
                        },
                        new
                        {
                            Id = 2,
                            Name = "пассив."
                        },
                        new
                        {
                            Id = 3,
                            Name = "актив.-пассив."
                        });
                });

            modelBuilder.Entity("API.Database.AccountClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountClasses");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Description = "ДЕНЕЖНЫЕ СРЕДСТВА"
                        },
                        new
                        {
                            Id = 21,
                            Description = "КРЕДИТЫ И ИНЫЕ АКТИВНЫЕ ОПЕРАЦИИ С КОММЕРЧЕСКИМИ ОРГАНИЗАЦИЯМИ"
                        },
                        new
                        {
                            Id = 23,
                            Description = "КРЕДИТЫ И ИНЫЕ АКТИВНЫЕ ОПЕРАЦИИ С ИНДИВИДУАЛЬНЫМИ ПРЕДПРИНИМАТЕЛЯМИ"
                        },
                        new
                        {
                            Id = 24,
                            Description = "КРЕДИТЫ И ИНЫЕ АКТИВНЫЕ ОПЕРАЦИИ С ФИЗИЧЕСКИМИ ЛИЦАМИ"
                        },
                        new
                        {
                            Id = 12,
                            Description = "СРЕДСТВА В НАЦИОНАЛЬНОМ БАНКЕ И ЦЕНТРАЛЬНЫХ(НАЦИОНАЛЬНЫХ) БАНКАХ ИНОСТРАННЫХ ГОСУДАРСТВ"
                        },
                        new
                        {
                            Id = 13,
                            Description = "ДРАГОЦЕННЫЕ МЕТАЛЛЫ И ДРАГОЦЕННЫЕ КАМНИ"
                        },
                        new
                        {
                            Id = 15,
                            Description = "СРЕДСТВА В ДРУГИХ БАНКАХ, СПЕЦИАЛИЗИРОВАННЫХ ФИНАНСОВЫХ ОРГАНИЗАЦИЯХ"
                        },
                        new
                        {
                            Id = 16,
                            Description = "СРЕДСТВА НАЦИОНАЛЬНОГО БАНКА"
                        },
                        new
                        {
                            Id = 17,
                            Description = "СРЕДСТВА ДРУГИХ БАНКОВ, СПЕЦИАЛИЗИРОВАННЫХ ФИНАНСОВЫХ ОРГАНИЗАЦИЙ"
                        },
                        new
                        {
                            Id = 19,
                            Description = "РЕЗЕРВЫ НА ПОКРЫТИЕ ВОЗМОЖНЫХ УБЫТКОВ И ПО НЕПОЛУЧЕННЫМ ПРОЦЕНТНЫМ ДОХОДАМ ПО ОПЕРАЦИЯМ С БАНКАМИ"
                        },
                        new
                        {
                            Id = 30,
                            Description = "СРЕДСТВА НА ТЕКУЩИХ (РАСЧЕТНЫХ) БАНКОВСКИХ СЧЕТАХ КЛИЕНТОВ"
                        },
                        new
                        {
                            Id = 34,
                            Description = "ВКЛАДЫ (ДЕПОЗИТЫ) КЛИЕНТОВ"
                        },
                        new
                        {
                            Id = 73,
                            Description = "СОБСТВЕННЫЙ КАПИТАЛ"
                        },
                        new
                        {
                            Id = 80,
                            Description = "ПРОЦЕНТНЫЕ ДОХОДЫ"
                        });
                });

            modelBuilder.Entity("API.Database.AccountSubclass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountClassId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountClassId");

                    b.ToTable("AccountSubclasses");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            AccountClassId = 10,
                            Description = "Денежные средства в кассе"
                        },
                        new
                        {
                            Id = 120,
                            AccountClassId = 12,
                            Description = "Корреспондентские счета в Национальном банке и центральных(национальных) банках иностранных государств"
                        },
                        new
                        {
                            Id = 210,
                            AccountClassId = 21,
                            Description = "Займы коммерческим организациям"
                        },
                        new
                        {
                            Id = 230,
                            AccountClassId = 23,
                            Description = "Займы индивидуальным предпринимателям"
                        },
                        new
                        {
                            Id = 240,
                            AccountClassId = 24,
                            Description = "Займы физическим лицам"
                        },
                        new
                        {
                            Id = 301,
                            AccountClassId = 30,
                            Description = "Текущие (расчетные) банковские счета клиентов"
                        },
                        new
                        {
                            Id = 340,
                            AccountClassId = 34,
                            Description = "Вклады (депозиты) до востребования"
                        },
                        new
                        {
                            Id = 341,
                            AccountClassId = 10,
                            Description = "Срочные вклады (депозиты)"
                        },
                        new
                        {
                            Id = 347,
                            AccountClassId = 34,
                            Description = "Начисленные процентные расходы по вкладам(депозитам) клиентов"
                        },
                        new
                        {
                            Id = 730,
                            AccountClassId = 73,
                            Description = "Уставный фонд"
                        },
                        new
                        {
                            Id = 732,
                            AccountClassId = 73,
                            Description = "Фонды"
                        },
                        new
                        {
                            Id = 800,
                            AccountClassId = 80,
                            Description = "Процентные доходы по средствам в Национальном банке и центральных (национальных) банках иностранных государств"
                        },
                        new
                        {
                            Id = 801,
                            AccountClassId = 80,
                            Description = "Процентные доходы по средствам в других банках, специализированных финансовых организациях"
                        },
                        new
                        {
                            Id = 802,
                            AccountClassId = 80,
                            Description = "Процентные доходы по кредитам и иным активным операциям с небанковскими финансовыми организациями"
                        });
                });

            modelBuilder.Entity("API.Database.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountSubclassId")
                        .HasColumnType("int");

                    b.Property<string>("Charateristic")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountSubclassId");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = 1010,
                            AccountSubclassId = 101,
                            Charateristic = "А",
                            Description = "Денежные средства в кассе"
                        },
                        new
                        {
                            Id = 1201,
                            AccountSubclassId = 120,
                            Charateristic = "А",
                            Description = "Корреспондентский счет в Национальном банке для внутриреспубликанских расчетов"
                        },
                        new
                        {
                            Id = 2100,
                            AccountSubclassId = 210,
                            Charateristic = "А",
                            Description = "Займы коммерческим организациям"
                        },
                        new
                        {
                            Id = 2300,
                            AccountSubclassId = 230,
                            Charateristic = "А",
                            Description = "Займы индивидуальным предпринимателям"
                        },
                        new
                        {
                            Id = 2400,
                            AccountSubclassId = 240,
                            Charateristic = "А",
                            Description = "Займы физическим лицам на потребительские цели"
                        },
                        new
                        {
                            Id = 3401,
                            AccountSubclassId = 340,
                            Charateristic = "П",
                            Description = "Вклады(депозиты) до востребования небанковских финансовых организаций"
                        },
                        new
                        {
                            Id = 3402,
                            AccountSubclassId = 340,
                            Charateristic = "П",
                            Description = "Вклады(депозиты) до востребования коммерческих организаций"
                        },
                        new
                        {
                            Id = 3403,
                            AccountSubclassId = 340,
                            Charateristic = "П",
                            Description = "Вклады(депозиты) до востребования индивидуальных предпринимателей"
                        },
                        new
                        {
                            Id = 3404,
                            AccountSubclassId = 340,
                            Charateristic = "П",
                            Description = "Вклады(депозиты) до востребования физических лиц"
                        },
                        new
                        {
                            Id = 3405,
                            AccountSubclassId = 340,
                            Charateristic = "П",
                            Description = "Вклады(депозиты) до востребования некоммерческих организаций"
                        },
                        new
                        {
                            Id = 3411,
                            AccountSubclassId = 341,
                            Charateristic = "П",
                            Description = "Срочные вклады (депозиты) небанковских финансовых организаций"
                        },
                        new
                        {
                            Id = 3412,
                            AccountSubclassId = 341,
                            Charateristic = "П",
                            Description = "Срочные вклады (депозиты) коммерческих организаций"
                        },
                        new
                        {
                            Id = 3413,
                            AccountSubclassId = 341,
                            Charateristic = "П",
                            Description = "Срочные вклады (депозиты) индивидуальных предпринимателей"
                        },
                        new
                        {
                            Id = 3414,
                            AccountSubclassId = 341,
                            Charateristic = "П",
                            Description = "Срочные вклады (депозиты) физических лиц"
                        },
                        new
                        {
                            Id = 3415,
                            AccountSubclassId = 341,
                            Charateristic = "П",
                            Description = "Срочные вклады (депозиты) некоммерческих организаций"
                        },
                        new
                        {
                            Id = 3470,
                            AccountSubclassId = 347,
                            Charateristic = "П",
                            Description = "Начисленные процентные расходы по вкладам(депозитам) до востребования"
                        },
                        new
                        {
                            Id = 3471,
                            AccountSubclassId = 347,
                            Charateristic = "П",
                            Description = "Начисленные процентные расходы по срочным вкладам(депозитам)"
                        },
                        new
                        {
                            Id = 3472,
                            AccountSubclassId = 347,
                            Charateristic = "П",
                            Description = "Начисленные процентные расходы по условным вкладам(депозитам)"
                        },
                        new
                        {
                            Id = 8003,
                            AccountSubclassId = 800,
                            Charateristic = "П",
                            Description = "Процентные доходы по вкладам (депозитам) до востребования, размещенным в Национальном банке и центральных (национальных) банках иностранных государств"
                        },
                        new
                        {
                            Id = 3011,
                            AccountSubclassId = 301,
                            Charateristic = "П",
                            Description = "Текущие (расчетные) банковские счета небанковских финансовых организаций"
                        },
                        new
                        {
                            Id = 3012,
                            AccountSubclassId = 301,
                            Charateristic = "П",
                            Description = "Текущие (расчетные) банковские счета коммерческих организаций"
                        },
                        new
                        {
                            Id = 3013,
                            AccountSubclassId = 301,
                            Charateristic = "П",
                            Description = "Текущие (расчетные) банковские счета индивидуальных предпринимателей"
                        },
                        new
                        {
                            Id = 3014,
                            AccountSubclassId = 301,
                            Charateristic = "П",
                            Description = "Текущие (расчетные) банковские счета физических лиц "
                        },
                        new
                        {
                            Id = 3015,
                            AccountSubclassId = 301,
                            Charateristic = "П",
                            Description = "Текущие (расчетные) банковские счета некоммерческих организаций"
                        },
                        new
                        {
                            Id = 7327,
                            AccountSubclassId = 732,
                            Charateristic = "П",
                            Description = "Фонд развития"
                        });
                });

            modelBuilder.Entity("API.Database.Citizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Citizenships");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Республика Беларусь"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Другое"
                        });
                });

            modelBuilder.Entity("API.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Минск"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Гомель"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Витебск"
                        },
                        new
                        {
                            Id = -4,
                            Name = "Могилёв"
                        },
                        new
                        {
                            Id = -5,
                            Name = "Гродно"
                        },
                        new
                        {
                            Id = -6,
                            Name = "Брест"
                        },
                        new
                        {
                            Id = -7,
                            Name = "Бобруйск"
                        },
                        new
                        {
                            Id = -8,
                            Name = "Барановичи"
                        },
                        new
                        {
                            Id = -9,
                            Name = "Борисов"
                        },
                        new
                        {
                            Id = -10,
                            Name = "Пинск"
                        },
                        new
                        {
                            Id = -11,
                            Name = "Орша"
                        },
                        new
                        {
                            Id = -12,
                            Name = "Мозырь"
                        },
                        new
                        {
                            Id = -13,
                            Name = "Лида"
                        },
                        new
                        {
                            Id = -14,
                            Name = "Солигорск "
                        },
                        new
                        {
                            Id = -15,
                            Name = "Новополоцк"
                        });
                });

            modelBuilder.Entity("API.Database.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("CitizenshipId")
                        .HasColumnType("int");

                    b.Property<int>("DisabilityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FamilyStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MounthlyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PassportIdNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("PassportIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportIssuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("PhoneNumberMobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumberStationary")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RegistrationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationCityId")
                        .HasColumnType("int");

                    b.Property<string>("ResidenceAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResidenceCityId")
                        .HasColumnType("int");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("DisabilityId");

                    b.HasIndex("FamilyStatusId");

                    b.HasIndex("PassportIdNumber")
                        .IsUnique();

                    b.HasIndex("RegistrationCityId");

                    b.HasIndex("ResidenceCityId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("API.Database.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "USD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EUR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GBP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "BYN"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RUB"
                        });
                });

            modelBuilder.Entity("API.Database.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ContractTerm")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DepositAmount")
                        .HasColumnType("int");

                    b.Property<int>("DepositNumber")
                        .HasColumnType("int");

                    b.Property<int>("DepositPercent")
                        .HasColumnType("int");

                    b.Property<int>("DepositTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MainAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PercentAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepositTypeId");

                    b.HasIndex("MainAccountId");

                    b.HasIndex("PercentAccountId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("API.Database.DepositType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DepositTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Отзывный"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Безотзывный"
                        });
                });

            modelBuilder.Entity("API.Database.Disability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disabilities");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Нет"
                        },
                        new
                        {
                            Id = -2,
                            Name = "I степень"
                        },
                        new
                        {
                            Id = -3,
                            Name = "II степень"
                        },
                        new
                        {
                            Id = -4,
                            Name = "III степень"
                        },
                        new
                        {
                            Id = -5,
                            Name = "IV степень"
                        });
                });

            modelBuilder.Entity("API.Database.FamilyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FamilyStatuses");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "холост (не замужем)"
                        },
                        new
                        {
                            Id = -2,
                            Name = "женат (замужем)"
                        },
                        new
                        {
                            Id = -3,
                            Name = "разведен (разве­дена)"
                        },
                        new
                        {
                            Id = -4,
                            Name = "вдовец (вдова)"
                        });
                });

            modelBuilder.Entity("API.Database.Account", b =>
                {
                    b.HasOne("API.Database.AccountActivity", "AccountActivity")
                        .WithMany()
                        .HasForeignKey("AccountActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Database.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Database.Client", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("AccountActivity");

                    b.Navigation("AccountType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Database.AccountSubclass", b =>
                {
                    b.HasOne("API.Database.AccountClass", "AccountClass")
                        .WithMany()
                        .HasForeignKey("AccountClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountClass");
                });

            modelBuilder.Entity("API.Database.AccountType", b =>
                {
                    b.HasOne("API.Database.AccountSubclass", "AccountSubclass")
                        .WithMany()
                        .HasForeignKey("AccountSubclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountSubclass");
                });

            modelBuilder.Entity("API.Database.Client", b =>
                {
                    b.HasOne("API.Database.Citizenship", "Citizenship")
                        .WithMany()
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Database.Disability", "Disability")
                        .WithMany()
                        .HasForeignKey("DisabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Database.FamilyStatus", "FamilyStatus")
                        .WithMany()
                        .HasForeignKey("FamilyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Database.City", "RegistrationCity")
                        .WithMany()
                        .HasForeignKey("RegistrationCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Database.City", "ResidenceCity")
                        .WithMany()
                        .HasForeignKey("ResidenceCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Citizenship");

                    b.Navigation("Disability");

                    b.Navigation("FamilyStatus");

                    b.Navigation("RegistrationCity");

                    b.Navigation("ResidenceCity");
                });

            modelBuilder.Entity("API.Database.Deposit", b =>
                {
                    b.HasOne("API.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Database.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Database.DepositType", "DepositType")
                        .WithMany()
                        .HasForeignKey("DepositTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Database.Account", "MainAccount")
                        .WithMany()
                        .HasForeignKey("MainAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Database.Account", "PercentAccount")
                        .WithMany()
                        .HasForeignKey("PercentAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Currency");

                    b.Navigation("DepositType");

                    b.Navigation("MainAccount");

                    b.Navigation("PercentAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
